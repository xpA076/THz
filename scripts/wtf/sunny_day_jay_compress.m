bpm = 68;
pianod = build_pianod();
[t, b] = build_melody();
yt = build_sound_decompress(t, bpm, pianod);
yb = build_sound_decompress(b, bpm, pianod);
y = zeros(max([length(yt), length(yb)]), 1);
y(1:length(yt)) = y(1:length(yt)) + yt * 0.8;
y(1:length(yb)) = y(1:length(yb)) + yb;
sound(y / max(y), 44100)

function y = build_sound_decompress(s, bpm, pianod)
dt = 1 / 44100;
y = [];
mix_ratio = [0.8, 0.5, 0.4];
pt = 0;
inote = 1;
while inote < length(s)
    N_pt = round(pt / dt);
    note_nums = [];
    while length(note_nums) == 0 | mod(note_nums(end), 2) == 1
        note_nums = [note_nums, 2^12 * b64decode(s(inote)) + 2^6 * b64decode(s(inote + 1)) + b64decode(s(inote + 2))];
        inote = inote + 3;
    end
    for i = 1:length(note_nums)
        fi = floor(note_nums(i) / 2^11);
        drm = floor(mod(note_nums(i), 2^11) / 2^6);
        drt = floor(mod(note_nums(i), 2^6) / 2^2);
        dr = drm * (0.25 * 2^drt);
        relx = 0.4 * dr + 0.4;
        if fi > 0
            yn = generate_piano_note(440 * 2^((fi - 37) / 12), pianod, relx);
            if N_pt + length(yn) - length(y) > 0
                y = [y; zeros(N_pt + length(yn) - length(y), 1)];
            end
            y(N_pt + 1:N_pt + length(yn)) = y(N_pt + 1:N_pt + length(yn)) + mix_ratio(length(note_nums)) * yn;
        end
    end
    pt = pt + dr * 60 / bpm;
end
end

function note = generate_piano_note(f, pianod, relx)
fs = 44100;
dt = 1 / fs;
dte = pianod.td(1) * relx;
N = round(dte * (length(pianod.td) + 1) / dt);
t = ([1:N])' * dt;
y = 0;
for ifh = 1:size(pianod.hl, 2)
    ints = func_interp1(pianod.td * relx, abs(pianod.hl(:, ifh)), t);
    yh = ints .* sin(2 * pi * ifh * f * t);
    y = y + yh;
end
note = y / max(y);
end

function val = func_interp1(X, V, Xq)
i_left = find(Xq < X(1));
il = i_left(end);
i_right = find(Xq > X(end));
ir = i_right(1);
val = zeros(size(Xq, 1), size(Xq, 2));
val(1:il) = (V(1) - 0) / (X(1) - 0) * (Xq(1:il) - 0) + 0;
val(il + 1:ir - 1) = interp1(X, V, Xq(il + 1:ir - 1));
val(ir:end) = (V(end) - V(end - 1)) / (X(end) - X(end - 1)) * (Xq(ir:end) - X(end)) + V(end);
end

function pianod = build_pianod()
enc_d = [
    'ys0S+7///Z6e4K5n255y3h4Y6R282t04y1yovZt+rqqoplnqmMkfi6htfTeDb4b3bvbqbDauZPZvY0YHW5VpVXUfTtToSdSWRmRHQtPuPmObOINiMXL+LJKvKXJ1JbIoH1HNGlGOFxFtFSFEFBEjEbDuDQC+C2CxCuCrCfCUB+ByBpBtB4CCB+BrBiBZBWBYBVBSBIA+A3AuArAoAmAiAfAeAcAdAZAXAXARARALAKAMANAKALAIAGAFAFAFAFAGAGAEAGAGAGAGAFAFAFAEADACADADADAEAFAFAEACABABABABABABACABABABABAAABAAAAAAABAAAAAAAAAA',...
    'PqH8JOLTMIKwH9HgHmG4HgGrGtGXGwHMITH/IaIZIjJMKJLeLHLWKqK0KwK6K1LYKiKhKnKhKYKWJqJLJMJKI/IgIDHnHRHHGdGHFyFpFWFJEqEHDwDoDhC0CuChCXCGB7B1BhBdBMBEA5BFBPBOBEBHBGBQBLBPBbBRBWBgBfBoBmBrBoBkBhBWBLBJBFBEA9A2AyAsApAlAjAdAUAVAXAWAUAOAOARAVASARAQANANAMALAKAIAJAIAHAGAHAGAGAHAGAHAHAHAHAGAGAFAFAEADADAEAFAEAFAEACADADADACACACACACABABABABABABAAAAABAAAAAAAAAA',...
    'ZcUlUNUCVRSHOgN2MyLyKmIgG+HhG4EuFjFxE3E1EcC4EMExDnC9EgDWBsCwC2ClC5DkECD7DgEdE8EmFFE6EiEGEEENDjEBEPD0D4EDDgDVDhDfDfDJDLC3CvCkCWCWCIB9CBBvBeBkBgBeBVBmBrBhBXBuBjBnBpBqBqBgBcBaBXBWBTBTBIBFA9A4AyA0AxArAsAoAlAgAeAfAfAbAaAWAVAQAQARAPAPAPALAMAMAKAKAJAJAIAIAGAFAFAFAEAEAFADAEAEADAEAEAEAEADADADAEADACADACABABABACABABABABAAAAAAABAAAAAAAAAAAAAAAAAAAAAA',...
    'LbMCLnK5KsKXKDJlJHIZImIFIRI2IhHaHAFoEECbBWAQAkAnAnAlBbCCCICJCGB6B3CHCCB9BsBpBUBBBIA1A5AsAdATASAiAuAtAhAbAXAdAoA2A5A1A0AzA4A5A1A1AwAyA2AyAxAzAyA3A9A9BCA/A9A1AuArAlAjAhAhAeAeAiAjAeAaAWAVARARAOALAKAJAJAKALAKAKAIAHAHAFAEAFAGAGAHAIAIAIAHAHAGAFAFAFAEAEAEADACABABAAAAABABAAABABABABACACACACACACABABABABABABABABABABABABABAAAAAAAAAAAAAAAAAAAAAAAAAAAA',...
    'LkLOKSJHIWHVGhGTFUFkFhFpEoEZECD1DVDADPDfDmDYDSDoDXDWDTDPDCDMDCClCiCpCaCICJCHCAB3BkBkBoBcBNBKA6A5A3A8A7AsAwAsAlAjAmAlAjAbAYAZAWAZAYAVATAVAWASARAOANAHAHAFADACAGAMANALAIAJAIAIAIAFAEAFAEACACAEACADADADACACABABABABABAAABABAAAAABAAAAAAABABAAAAAAAAAAABABABABABABABABABAAAAAAAAABABACABAAABAAAAAAAAABABABAAAAAAAAAAABAAAAAAAAAAAAABABAAAAAAAAAAAAAAAAAA',...
    'VkV7TRRNQBOhMdLtL9LVJnI6I4IgHzGsF1FZE4EWEEDsDRDDDLDCC4DCDMClCjCjChCFBdBdBVBHBbBjBeBlBTBGA8A0AtAwAyAsA0A4BCBXBYBfBgBiBfBaBfBcBcBaBVBYBXBeBjBlBoBjBeBVBLBMBIBEA+A/A+A5A2A8A6A1AvAvArAkAdAcAZAWATASAOANALAIAGAFAFAEADAEAEACABACABAAAAAAACACABABACABABABABAAAAABABAAAAAAAAACABABABACACACABABABABABABACACACABABABABABABABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',...
    'BjBbARASAZA2BGA3BMBOBSBZBVBTBOBIBGBFBDA4AwA0ArAoAeAVARAQAPALAKAJAIAGAIAIAGAFAEAHAIADAGAFAEAEACAEAFAKAHAJAJALAJAKAIAIAJAHAJAIAHAIAJAIAHAIAIAIAHAGAFAHAFAGAFAGAEAGAEAFAEAEAFADADADACACACACABABAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAABAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',...
    'GjGdFoEeEEDiDTDTD6EdEsELDWDGCaBlBRBIBKBAAnAqAzAsAmAfAqAxA5A3A4A+A8A5AsAwBBBAA6A4A0A3A0AtAqAnAkAkAiAiAiAjAeAcAYAWAWAXAVASARAOANAMAKALALALAKAJAJALAKAKAKAKAJAJAKAKAKAJAJAIAGAGAGAGAGAEADADACABABACABACADACACABABACABABABABABABABABABABABABAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',...
    'ApAVAUAaARALANALAEAEAEAFADAHAHAFAEAHADAEADACACACACADABABACACACADADACACAEAEACADAEABABABAAAAAAAAABAAABABABABAAABABAAAAABABABABABAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAABABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',...
    'AwAzAuAjAcAdAWAOAJAHAEAFAHAGAGAHAJAJAKAHAHAHAIAKAJAKAKAIAIAHAGAGAFAEAEABACABACACABACACADACADADADADADADADACADABABABABABABABABABABAAAAABAAAAABABAAAAAAAAAAABABABABAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',...
    ];
pianod.td = ([1:170])' * 1 / 80;
pianod.hl = zeros(170, 10);
for i1 = 1:170
    for i2 = 1:10
        ci = (i2 - 1) * 2 * 170 + (i1 - 1) * 2 + 1;
        pianod.hl(i1, i2) = (b64decode(enc_d(ci)) * 2^6 + b64decode(enc_d(ci + 1)) + 1) / 2^12;
    end
end
end

function [t, b] = build_melody()
t1 = 'ABERhEVBERhEABEPBEVBERhEABEPBEVBERhEPBEVBEPBEShEABERhEVBERhEABEPBEVBERhEABEPBEVBERhEPBERhEShEPBEABERhEVBERhEABEPBEVBERhEABEPBEVBERhEPBEVBEPBEShEABERhEVBERhEABEPBEVBERhEABEPBEVBERhEPBERhEShEPBEABEVBEVBERhERhIShETjEVBEVBERhERhEShAThAShERhEABEVBEVBERhERhEShETjEThIThEUBAThAShAUBAThERhEABEQBFThEQBFThEQBFThEQBFUBEThEQBFShERhAShAPBFThEPBFThEPBFThEPBFThEShAThAPBFShEPBJRhIQBERBERhEThEQBFUBEThEShERhAShAPBFThEPBFThEPBFThEPBFThEShAThAPBFShEPBJRhI';
b1 = 'KBMIBMLhMLhILBIKBMIBMLhMLhILBIEBEHhELhEIBECBEFhEKBEFhEFhEJBENhEJBEFhEJBEFBJLBIEBEHhELhEIBECBEFhEKBEFhEFhEJBENhEJBEFhEJBEFBFLBEJBEEBEHhELhEIBECBEIBELhEKBEFhEJBENhEJBENhEJBEFBFLBEJBEEBEHhELhEIBECBEIBELhEKBEFhEJBENhEJBENhEJBEFBFLBEJBEEBEHhELhEIBECBEIBELhEKBEFhEJBENhEJBENhEJBEFBFLBEJBEEBEHhELhEIBECBEIBELhEKBEFhEJBENhEJBENhEJBEFBFLBEJBE';
t2 = 'NhJRhIABANhANhBRhARBAOBFRhEOBAOBBRhAODBRjARBAPBJRhIABAPBARhAShAPBBShAThEPBBVBAPBBVBAPBEPBBShARhJVBIABAPBERhBVBARhBVBAPBERhBVBARhBVBAUBAThAShATjEPBEPBFRhEPBEPBFRhERhARBAQBERBERhEVBEUBEThERhERlEABEPBERhERBEQBERBERhEVBEUBEThERhESjEPBERhEPBFRBFShEPBFRBFVBEThEShEUBEThIRhEVBEXBEXhEXBEVBERhIRhEWBEWBIWBEVBEVBIVBEUBEThEShEThEUBETlEThEUhEVhEThIUBEVBEXBEYhEXBEXhEXjEABEXhEXhEVBEVBEWBEVBEUBEShEThEUBEVBEWBERhEWBIXBIThEShEUBEThIRhEVBEXBEXhEXBEVBERhIRhEWBEWBIWBEVBEVBIVBEUBEThEShEThEUBETlEThEUhEVhEThIUBEVBEXBEYhEXBEXhEXjEABEXhEXhEVBEVBEWBEVBEUBEQBERBERhEShEThESjEThEShE';
b2 = 'EBEHhELhEIBECBEIBEIBFLhEKBEFhEJBENhEJBENhEJBEFBFLBEJBEEBEHhELhEIBECBEIBEIBFLhEKBEFhEJBENhEJBENhEJBEFBFLBEJBEEBEHhELhEIBECBEIBELhEKBEFhEJBENhEJBENhEJBEFBFLBEJBEEBEHhELhEIBECBEIBELhEKBEDBEJBEMhEJBEDBEJBEMhEJBEFhEJBENhEJBENhEJBENhEJBEEBEHhELhEHhELhEHhELhEHhECBEFhEKBEFhEDBEGhELBEGhEFhEJBENhEJBENhEJBENhEJBEBhEHhEMhELBEHhELBEPhELBEEBEHhELhEHhEDBEHhELhEHhECBEFhEKBEFhEKBEFhEKBEFhEDBEGhELBEGhELBEGhELBEGhEFhEJBENhEJBENhEJBENhEJBEEBEHhELhEHhELhEHhELhEHhECBEFhEKBEFhEDBEGhELBEGhEFhEJBENhEJBENhEJBENhEJBEBhEHhEMhELBEHhELBEPhELBEEBEHhELhEHhEDBEHhELhEHhECBEFhEKBEFhEKBEFhEKBEFhEDBEGhELBEGhELBEGhELBEGhE';
t3 = 'RhIVBERhIPBEVBERhAShARhIVBERhIVBEXhEXBEVBIVBERhIPBERhEShERhIRhFVBERhIPBEPBFShERhARBA';
b3 = 'FhEJBENhEJBENhEJBENhEJBEJBELhEQBELhEQBELhEQBELhEGhEKBEOBEKBEOBEKBEOBEKBEIBELhEOBELhEDBEJBEMhEJBE';
t4 = 'RhIVBERhIPBEVBERhAShARhIVBERhIVBEXhEXBEVBIVBERhIPBERhEShERhIRhFVBERhIPBEPBFShERhARBARhIVBERhIPBEVBERhAShARhIVBERhIVBEXhEXBEVBIVBERhIPBERhEShERhIRhFVBESpE';
b4 = 'FhEJBENhEJBENhEJBENhEJBEJBELhEQBELhEQBELhEQBELhEGhEKBEOBEKBEOBEKBEOBEKBEIBELhEOBELhEDBEJBEMhEJBEFhEJBENhEJBENhEJBENhEJBEJBELhEQBELhEQBELhEQBELhEGhEKBEOBEKBEOBEKBEOBEKBEIBELhEOBEJJE';
t = [t1, t2, t3, t2, t4];
b = [b1, b2, b3, b2, b4];
end

function num = b64decode(c)
if c == '+'
    num = 62;
elseif c == '/'
    num = 63;
elseif c < 'Z'
    num = c - 'A';
elseif c < 'z'
    num = c - 'a' + 26;
else
    num = c - '0' + 52;
end
end
